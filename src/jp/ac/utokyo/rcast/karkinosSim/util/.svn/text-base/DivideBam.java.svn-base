/*
 * @author Hiroki Ueda
 * ueda[at]genome.rcast.u-tokyo.ac.jp
 * @version 1.0
 * @since 1.0
 */
package jp.ac.utokyo.rcast.karkinosSim.util;

import java.io.File;
import java.util.Iterator;

import net.sf.samtools.SAMFileHeader;
import net.sf.samtools.SAMFileReader;
import net.sf.samtools.SAMFileWriter;
import net.sf.samtools.SAMFileWriterFactory;
import net.sf.samtools.SAMFileHeader.SortOrder;
import net.sf.samtools.SAMRecord;
import net.sf.samtools.SAMSequenceDictionary;
import net.sf.samtools.SAMSequenceRecord;

public class DivideBam {

	public static void main(String[] arg) {


		try {
			
			String sam1 = "/GLUSTER_DIST/data/users/ueda/karkinosSim/THCC135/THCC_135T-THCC_135N_normal_pre.bam";
			String outdir = "/GLUSTER_DIST/data/users/ueda/karkinosSim/THCC135/";
			//String sam1 = "/GLUSTER_DIST/data/users/ueda/karkinosSim/test/C39_normal_genome.bam";
			//String outdir = "/GLUSTER_DIST/data/users/ueda/karkinosSim/test/";
			exec(sam1,outdir);

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	private static void exec(String sam1, String outdir) throws Exception {
		
		SAMFileReader sr1 = getReader(sam1);
		
		SAMFileHeader sfh = sr1.getFileHeader().clone();
		
		File f = new File(sam1);
		String name = f.getName();
		name = name.replaceAll(".bam", "");
		
		SAMFileWriter writer0 = getWriter(sfh, outdir+"/"+name+"_0.bam");
		SAMFileWriter writer1 = getWriter(sfh, outdir+"/"+name+"_1.bam");
		SAMFileWriter writer2 = getWriter(sfh, outdir+"/"+name+"_2.bam");
		
		
		Iterator<SAMRecord> ite = sr1.iterator();
		while(ite.hasNext()){
			
			SAMRecord sam = ite.next();
			String readname = sam.getReadName();
			String ypic = readname.substring(readname.lastIndexOf(":")+1);
			int ypixint = 0;
			try{
				ypixint = Integer.parseInt(ypic);
			}catch(Exception ex){
				
			}
			int mod3 = ypixint%3;
			if(mod3==0){
				writer0.addAlignment(sam);
			}else if(mod3==1){
				writer1.addAlignment(sam);
			}else{
				writer2.addAlignment(sam);
			}

		}
		sr1.close();
		writer0.close();
		writer1.close();
		writer2.close();
	}

	private static SAMFileReader getReader(String in) {

		File INPUT = new File(in);
		SAMFileReader reader = new SAMFileReader(INPUT);
		SAMFileHeader sfh = reader.getFileHeader();
		if (sfh.getAttribute("SO") == null
				|| sfh.getAttribute("SO").equals("sorted")) {
			sfh.setSortOrder(SortOrder.coordinate);
		}
		reader.setValidationStringency(SAMFileReader.ValidationStringency.SILENT);
		return reader;
	}

	private static SAMFileWriter getWriter(SAMFileHeader sfh2, String OUTPUT)
			throws Exception {


		SAMFileWriterFactory factory = new SAMFileWriterFactory();
		sfh2.setSortOrder(SortOrder.coordinate);
		factory.setCreateIndex(true);
		SAMFileWriter writer = factory.makeSAMOrBAMWriter(sfh2, true, new File(
				OUTPUT));

		return writer;
	}
}
